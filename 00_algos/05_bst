//You’ll build a balanced BST in this assignment. Do not use duplicate values because they make it more complicated and result in trees that are much harder to balance. Therefore, be sure to always remove duplicate values or check for an existing value before inserting.

/*
Build a Node class/factory. It should have an attribute for the data it stores as well as its left and right children.

Build a Tree class/factory which accepts an array when initialized. The Tree class should have a root attribute, which uses the return value of buildTree which you’ll write next.

Write a buildTree(array) function that takes an array of data (e.g., [1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324]) and turns it into a balanced binary tree full of Node objects appropriately placed (don’t forget to sort and remove duplicates!). The buildTree function should return the level-0 root node.

Tip: If you would like to visualize your binary search tree, here is a prettyPrint() function that will console.log your tree in a structured format. This function will expect to receive the root of your tree as the value for the node parameter.
*/

class Node {
    constructor(contents) {
        this.data = contents;
        this.left = null;
        this.right = null;
    }
}

class Tree {
    constructor(arr) {
        this.root = this.buildTree(arr);
    }

    buildTree(arr) {
        //console.log(arr);
        arr = [...new Set(arr)]; // remove the duplicates
        arr = [...arr].sort((a, b) => a - b); // need the array sorted
        //console.log(arr);

        return this.sortedArrayToBSTRecur(arr, 0, arr.length - 1);
    }

    //https://www.geeksforgeeks.org/sorted-array-to-balanced-bst/
    // Recursive function to construct BST
    sortedArrayToBSTRecur(arr, start, end) {
        if (start > end) return null;

        // Find the middle element
        let mid = start + Math.floor((end - start) / 2);

        // Create root node
        let root = new Node(arr[mid]);

        // Create left subtree
        root.left = this.sortedArrayToBSTRecur(arr, start, mid - 1);

        // Create right subtree
        root.right = this.sortedArrayToBSTRecur(arr, mid + 1, end);

        return root;
    }

    prettyPrint (node, prefix = "", isLeft = true) {
        if (node === null) {
            return;
        }
        if (node.right !== null) {
            this.prettyPrint(node.right, `${prefix}${isLeft ? "│   " : "    "}`, false);
        }
        console.log(`${prefix}${isLeft ? "└── " : "┌── "}${node.data}`);
        if (node.left !== null) {
            this.prettyPrint(node.left, `${prefix}${isLeft ? "    " : "│   "}`, true);
        }
    };

    //Write insert(value) and deleteItem(value) functions that insert/delete the given value. You’ll have to deal with several cases for delete, such as when a node has children or not. If you need additional resources, check out these two articles on inserting and deleting, or this video on BST inserting/removing with several visual examples.

    insert(n) {
        let node = new Node(n);
        let current = this.root;
        let prev = null;

        while (current != null) {
            prev = current;
            if (n > current.data) {
                current = current.right;
            }
            else {
                current = current.left;
            }
        }

        if (n > prev.data) {
            prev.right = node;
        }
        else {
            prev.left = node;
        }

    }

    isBalanced (root) {
        if (root == null)
            return true;
        return ((Math.abs((this.getMaxDepth(root.left) - this.getMaxDepth(root.right))) <= 1) && this.isBalanced(root.left) && this.isBalanced(root.right));
        return false;
    }

    getMaxDepth(node) {
        if (node == null)
            return 0;
        return (1 + Math.max(this.getMaxDepth(node.left), this.getMaxDepth(node.right)));
    }

    //Write a rebalance function that rebalances an unbalanced tree. Tip: You’ll want to use a traversal method to provide a new array to the buildTree function.
    rebalance(root) {
        
    }
     
}

let t = new Tree([3, 2, 1]);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));
t.insert(1);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));
t.insert(1);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));
t.insert(7);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));
t.insert(2.5);
t.insert(1.5);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));

t = new Tree([1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324]);
t.prettyPrint(t.root);
console.log(t.isBalanced(t.root));